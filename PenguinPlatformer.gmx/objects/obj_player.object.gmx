<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_64_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = global.playerImageSpeedIdle;
global.playerOnLadder = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.canJump = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fall
if (!global.playerOnLadder) {
    if ((vspeed &lt; 0)) {
        vspeed += global.gravity;
    } else if (place_free(x, y + global.playerHeight/2 + 1)) {
        global.playerFallSpeed = min(global.playerFallSpeed + global.gravity, global.maxFallSpeed);
        vspeed = global.playerFallSpeed;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

//Set player speed
global.playerSpeed = global.playerBaseSpeed * global.blockSpeedModifier;

//Set player image speed
global.playerImageSpeedWalk = global.playerBaseImageSpeedWalk * global.blockImageSpeedModifier;

switch (keyboard_key)
    {
    //Go left
    case vk_left:
    case ord("A"):
        sprite_index = spr_player_64_left;
        image_speed = global.playerImageSpeedWalk;
        x -= global.playerSpeed;
        break;
    //Go right
    case vk_right:
    case ord("D"):
        sprite_index = spr_player_64_right;
        image_speed = global.playerImageSpeedWalk;
        x += global.playerSpeed;
        break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump
if (!global.playerOnLadder) {
    //Only jump if player is not on ladder
    //Can't jump before alarm resets
    if (alarm_get(0) &lt; 0) {
        global.canJump = true;
    }
    
    //Test if player is midair
    if (place_empty(x, y + global.jumpCheckConstant)) {
        global.canJump = false;
    }
    global.canJump = true;
    if (global.canJump) {
        global.playerJumpSpeed = sqrt(2 * global.gravity * global.playerJumpHeight);
        vspeed = -100;//-global.playerJumpSpeed;
        /* Disable jump for time it takes to fall back
         * down to the level the jump started at
         */
        global.canJump = false;
        alarm_set(0, global.playerJumpTime * global.stepsPerSecond);
    }
} else {
    global.fallSpeed = 0;
    vspeed = 0;
    y -= 100;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump
if (alarm_get(0) &lt; 0) {
    global.canJump = true;
}

//Test if player is midair
if (place_empty(x, y + global.jumpCheckConstant)) {
    global.canJump = false;
}

if (global.canJump) {
    global.playerJumpSpeed = sqrt(2 * global.gravity * global.playerJumpHeight);
    vspeed = -global.playerJumpSpeed;
    /* Disable jump for time it takes to fall back
     * down to the level the jump started at
     */
    global.canJump = false;
    alarm_set(0, global.playerJumpTime * global.stepsPerSecond);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump if not on ladder
if (!global.playerOnLadder) {
    if (alarm_get(0) &lt; 0) {
        global.canJump = true;
    }
    
    //Test if player is midair
    if (place_empty(x, y + global.jumpCheckConstant)) {
        global.canJump = false;
    }
    
    if (global.canJump) {
        global.playerJumpSpeed = sqrt(2 * global.gravity * global.playerJumpHeight);
        vspeed = -global.playerJumpSpeed;
        /* Disable jump for time it takes to fall back
         * down to the level the jump started at
         */
        global.canJump = false;
        alarm_set(0, global.playerJumpTime * global.stepsPerSecond);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump
if (alarm_get(0) &lt; 0) {
    global.canJump = true;
}

//Test if player is midair
if (place_empty(x, y + global.jumpCheckConstant)) {
    global.canJump = false;
}

if (global.canJump) {
    global.playerJumpSpeed = sqrt(2 * global.gravity * global.playerJumpHeight);
    vspeed = -global.playerJumpSpeed;
    /* Disable jump for time it takes to fall back
     * down to the level the jump started at
     */
    global.canJump = false;
    alarm_set(0, global.playerJumpTime * global.stepsPerSecond);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set sprite back to idle animation
sprite_index = spr_player_64_idle;
image_speed = global.playerImageSpeedIdle;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set sprite back to idle animation
sprite_index = spr_player_64_idle;
image_speed = global.playerImageSpeedIdle;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set sprite back to idle animation
sprite_index = spr_player_64_idle;
image_speed = global.playerImageSpeedIdle;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set sprite back to idle animation
sprite_index = spr_player_64_idle;
image_speed = global.playerImageSpeedIdle;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
