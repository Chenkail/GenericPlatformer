<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_master</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set global variables for game

///Main Menu
//Initialize button pressed constant
global.buttonPressed = false; //Do not touch!

//Game name in title screen
global.gameTitle = "Penguin Platformer"; //Title of game - to be displayed on main menu
global.gameTitleY = room_height/5; //Y coordinates of center of title label, in pixels
global.gameTitleFont = fnt_title; //Font to be used for game title
global.gameTitleFontColor = c_white; //Font color to be used for game title

///Buttons
//Main menu button font
global.mainMenuButtonFont = fnt_menu_buttons; //Font to be used for main menu buttons
global.mainMenuButtonFontColor = c_white; //Font color to be used for main menu buttons

//Play button
global.mainMenuPlayButtonText = "Play!"; //Set text for play button
global.mainMenuPlayButtonX = room_width/2; //X coordinates of play button center, in pixels
global.mainMenuPlayButtonY = room_height/2; //Y coordinates of play button center, in pixels
//Dimensions
//Should be changed to be tight around the play button text
global.mainMenuPlayButtonWidth = 200;
global.mainMenuPlayButtonHeight = 100;

///Level select menu
//Number of levels
global.numberOfLevels = 6; //Total number of levels in the game
global.levelSelectColumns = 4; //Levels to display per row
global.levelSelectRows = 2; //Number of rows

//Size constants
global.levelSelectChoiceWidth = 200; //Width of level select option boxes, in pixels
global.levelSelectChoiceHeight = 200; //Height of level select option boxes, in pixels
global.levelSelectSpacing = 25; //Spacing between level select option boxes, in pixels
global.levelSelectBoxBuffer = 25; //Spacing between outside level select option boxes and the borders of the box around them, in pixels
global.levelSelectChoiceCornerRadius = min(global.levelSelectChoiceWidth, global.levelSelectChoiceHeight)/4; //Set corner radius to be 1/4 of the smaller dimension of the choice boxes

//Title
global.levelSelectTitle = "Level Select"; //Title to be displayed on level select screen
global.levelSelectTitleY = 100; //Y coordinate of center of title, in pixels
global.levelSelectTitleFont = fnt_title; //Level select title font
global.levelSelectTitleFontColor = c_white; //Level select title font color

//Box colors
global.levelSelectBoxColor = c_white; //Color of box around level select choices
global.levelSelectChoiceColor = c_black; //Color of level select option boxes
global.levelSelectChoiceOutline = true; //Should the level select option box be just an outline (true) or completely filled (false)
global.levelSelectChoiceFont = fnt_level_select_buttons; //Font for options in level select menu
global.levelSelectChoiceFontColor = c_black; //Font color for options in level select menu
global.levelSelectBoxCornerRadiusProportion = 0.25; //Proportion of smaller side length that the corner radius should be

//Check mark
global.levelChoiceMarkHorizontalOffset = 5;
global.levelChoiceMarkVerticalOffset = 5;
//Dimensions
//Do not touch unless sprite has been changed
global.checkMarkWidth = 32;
global.checkMarkHeight = 32;

///Game complete level
global.gameCompleteMessage = "Thanks for playing!";
global.gameCompleteFont = fnt_game_complete;
global.gameCompleteFontColor = c_white;
global.gameCompleteMessageX = room_width/2;
global.gameCompleteMessageY = room_height/3;

///Other Control Constants
//Define game steps per second
global.stepsPerSecond = 60;

///Player
//Set default player speeds
global.playerDefaultSpeed = 6; //Player default walking speed in pixels/step
global.playerDefaultClimbSpeed = 5;

//Defining global variables for player speeds
//Do not touch!
global.playerBaseSpeed = global.playerDefaultSpeed;
global.playerSpeed = global.playerBaseSpeed;
global.playerBaseClimbSpeed = global.playerDefaultSpeed;
global.playerClimbSpeed = global.playerBaseSpeed;
global.blockSpeedModifier = 0;

//Set animation speeds for various animations
//These should be adjusted individually through testing and then left alone
global.playerDefaultImageSpeedIdle = 0.06; //Done. Do not touch!
global.playerDefaultImageSpeedWalk = 0.14; //Done. Do not touch!

//Defining global variables for image speed
//Do not touch!
global.playerBaseImageSpeedIdle = global.playerDefaultImageSpeedIdle;
global.playerBaseImageSpeedWalk = global.playerDefaultImageSpeedWalk;
global.playerImageSpeedIdle = global.playerBaseImageSpeedIdle;
global.playerImageSpeedWalk = global.playerBaseImageSpeedWalk;

///Blocks
//Speed constants for different block types
global.blockSpeedWood = 1; //Walking speed multiplier wood
global.blockSpeedIce = 1.6; //Walking speed multiplier ice

//Image speed constants for different block types
global.blockImageSpeedWood = global.blockSpeedWood;
global.blockImageSpeedIce = global.blockSpeedIce;

///Jumping and falling
//Initalize jump permission to true
global.canJump = true; //Do not touch!

//Set jump constants
global.playerJumpTime = 0.4; //Length of player jump in seconds
global.jumpCheckConstant = 1; //Pixels below player to test for object
global.playerDefaultJumpHeight = 104;

//Set gravity and max fall speed, along with fall speed constant
global.playerFloatCheckWidth = 16;
global.gravity = 1.5;
global.maxFallSpeed = 10; //Maximum player fall speed in pixels per step
global.playerFallSpeed = 5; //Initialize global player fall speed variable and set it to a positive value so that the player falls if starting a level in the air

///Ladder
//Ladder collision check (how close does the center of the player need to be to the center of the ladder to register?)
global.ladderCheckWidth = 32; //Pixels to left/right (total width of box is twice this)
global.ladderCheckHeight = 32; //Pixels up/down (total height of box is twice this)

///Door
global.doorFadeColor = c_black; //Color to fade to when transitioning through a doorway
//Door collision check (how close does the center of the player need to be to the center of the door to register?)
global.doorCheckWidth = 32; //Pixels to left/right (total width of box is twice this)
global.doorCheckHeight = 32; //Pixels up/down (total height of box is twice this)

///Need more fish event (when player has not collected all the fish in the level)
global.needMoreFishTimeout = 2; //Time before need more fish message disappears, in seconds
//Dimensions
//Do not touch unless sprite is changed
global.needMoreFishWidth = 64;
global.needMoreFishHeight = 64;

///Portals
global.portalCooldown = 0.1; //Time between portal uses, in seconds
global.portalCheckWidth = 15; //Pixels to left/right (total width of box is twice this)
global.portalCheckHeight = 32; //Pixels up/down (total height of box is twice this)

///Effect variables
//Fade to next room
global.fadeTime = 2; //Length of fade in seconds
global.fadePerTick = 0.05; //How dark should it get per tick (lower number means smoother fade)


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="112">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
